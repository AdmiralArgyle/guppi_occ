####################################
# Start Substitutions
####################################

substitutions:
# Replace name with you sensor name
#  name: st-occ-2410
#  friendly_name: "ST Occ 2410"
  comment_text: "Generally Unstable and Poorly Produced Inventions - Single-target Human Presence and Occupancy Sensor (ESP32/LD2410) with Bluetooth Tracker"
  project_name: "GUPPI.ST-OCC-GP-2410-BLE"
  project_version: "25.2.27.1"
# **IMPORTANT** - Add API key here for copy/paste convenience
#  api_key: "abcxyz123="
# Specify below pin numbers for UART, GPIO, and I2C connections
# Delete if not needed
#  tx_pin_uart: GPIO43
#  rx_pin_uart: GPIO44
#  light_gpio: GPIO2
#  motion_gpio: GPIO2
#  sda_pin_i2c: GPIO6
#  scl_pin_i2c: GPIO7

####################################
# End Substitutions
####################################

# Enable logging at DEBUG level for detailed output during development
logger:
  # 0 Enables logging, but disables serial-port logging to free CPU and memory
  baud_rate: 0
  #  Disable DEBUG after testing
  #level: INFO

debug:
  update_interval: 30s

ota:
  - platform: esphome

number:
  # Uptime sensor
  - platform: uptime
    id: uptime_sensor
    internal: true
    entity_category: "diagnostic"
    update_interval: 1s

  # WiFi signal strength sensor
  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 30s
    entity_category: "diagnostic"

  # Internal ESP temperature sensor
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature
    entity_category: "diagnostic"

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected

text_sensor:
  - platform: template
    name: "Formatted Uptime"
    entity_category: "diagnostic"
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int days = dur / 86400;
      int hours = (dur % 86400) / 3600;
      int minutes = (dur % 3600) / 60;
      int seconds = dur % 60;
      char buffer[50];
      if (days > 0) {
        sprintf(buffer, "%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
      } else if (hours > 0) {
        sprintf(buffer, "%02dh %02dm %02ds", hours, minutes, seconds);
      } else if (minutes > 0) {
        sprintf(buffer, "%02dm %02ds", minutes, seconds);
      } else {
        sprintf(buffer, "%02ds", seconds);
      }
      return {buffer};
    update_interval: 60s

  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"


button:
  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    id: reboot_esp

switch:
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: factory_reset
    id: factory_reset_switch
    internal: true

