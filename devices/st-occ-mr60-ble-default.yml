####################################
# Start Substitutions
####################################

substitutions:
# Replace name with you sensor name
  name: "seeedstudio-mr60bha2-kit"
  friendly_name: "Seeed Studio MR60BHA2 Kit"
  comment_text: "Generally Unstable and Poorly Produced Inventions - Single-target Breath, Heartrate, and Occupancy Sensor with Bluetooth Tracker"
  project_name: "GUPPI.ST-OCC-MR60-BLE"
  project_version: "25.2.24.3.5"
# **IMPORTANT** - Add API key here for copy/paste convenience
  api_key: "abcxyz123="
# Specify below pin numbers for UART, GPIO, and I2C connections
# Delete if not needed
  tx_pin_uart: GPIO16
  rx_pin_uart: GPIO17
  light_gpio: GPIO1
#  motion_gpio: GPIO4
  sda_pin_i2c: GPIO22
  scl_pin_i2c: GPIO23

####################################
# End Substitutions
####################################


esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_upload.maximum_size: 4194304
  min_version: "2024.3.2" # Fix logger compile error on ESP32-C6 esphome#6323

esp32:
  board: esp32-c6-devkitc-1
  variant: esp32c6
  flash_size: 4MB # upload.flash_size
  framework:
    type: esp-idf
    version: latest
    sdkconfig_options:
      # @grigi found in testing that these options resulted in better responsiveness.
      # BLE 4.2 is supported by ALL ESP32 boards that have bluetooth, the original and derivatives.
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      # Also enable this on any derivative boards (S2, C3 etc) but not the original ESP32.
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
      # Extend the watchdog timeout, so the device reboots if the device appears locked up for over 10 seconds.
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"

external_components:
  - source:
      type: git
      url: https://github.com/limengdu/MR60BHA2_ESPHome_external_components
      ref: main
    components: [ seeed_mr60bha2 ]
    refresh: 0s

# Enable logging at DEBUG level for detailed output during development
logger:
  # 0 Enables logging, but disables serial-port logging to free CPU and memory
  baud_rate: 0
  #  Disable DEBUG after testing
#  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "${api_key}"
  # Only enable BLE tracking when wifi is up and api is connected
  # Gives single-core ESP32-C3 devices time to manage wifi and authenticate with api
  on_client_connected:
     - esp32_ble_tracker.start_scan:
        continuous: true
  # Disable BLE tracking when there are no api connections live
  on_client_disconnected:
    if:
      condition:
        not:
          api.connected:
      then:
        - esp32_ble_tracker.stop_scan:

ota:
  - platform: esphome

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_2_ssid
    password: !secret wifi_2_password
  - ssid: !secret wifi_3_ssid
    password: !secret wifi_3_password
  output_power: 8.5dB

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name}"
    password: !secret fallback_ap_password

# Web server (optional, consider disabling in production)
#web_server:
#  port: 80

# Bluetooth Tracker & Proxy configuration
# Use esp-idf platform if possible - not arduino - for better memory management
esp32_ble_tracker:
  scan_parameters:
    # Don't auto start BLE scanning, we control it in the `api` block's automation.
    continuous: False
    
    active: True  # send scan-request packets to gather more info, like device name for some devices.

    interval: 320ms  # default 320ms - how long to spend on each advert channel
    window:   300ms  # default 30ms - how long to actually "listen" in each interval. Reduce this if device is unstable.
    # If the device cannot keep up or becomes unstable, reduce the "window" setting. This may be
    # required if your device is controlling other sensors or doing PWM for lights etc.

bluetooth_proxy:
  # Allows outbound connections from HA to devices.
  active: true

captive_portal:

light:
  - platform: esp32_rmt_led_strip
    id: led_ring
    name: "Seeed MR60BHA2 RGB Light"
    pin: "${light_gpio}"
    num_leds: 1
    rmt_channel: 0
    rgb_order: GRB
    chipset: ws2812

i2c:
  sda: "${sda_pin_i2c}"
  scl: "${scl_pin_i2c}"
  scan: true
  id: bus_a

uart:
  id: uart_bus
  tx_pin: 
    number: ${tx_pin_uart}
  rx_pin: 
    number: ${rx_pin_uart}
  baud_rate: 115200
  parity: NONE
  stop_bits: 1


seeed_mr60bha2:
  id: my_seeed_mr60bha2

binary_sensor:
  - platform: seeed_mr60bha2
    has_target:
      name: "Person Information"

  - platform: status
    name: Online
    id: ink_ha_connected


sensor:
  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 1s

  - platform: seeed_mr60bha2
    breath_rate:
      name: "Real-time respiratory rate"
    heart_rate:
      name: "Real-time heart rate"
    distance:
      name: "Distance to detection object"
    num_targets:
      name: "Target Number"

  - platform: template
    name: "Breath Rate"
    id: breath_rate
    icon: "mdi:heart-pulse"
    min_value: 0
    max_value: 100
    step: 1
    accuracy_decimals: 0
    restore_value: false
    unit_of_measurement: "BPM"
    internal: true
    entity_category: "diagnostic"
  
  # Uptime sensor
  - platform: uptime
    id: uptime_sensor
    internal: true
    entity_category: "diagnostic"
    update_interval: 30s

  # WiFi signal strength sensor
  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 30s
    entity_category: "diagnostic"

  # Internal ESP temperature sensor
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature
    entity_category: "diagnostic"

text_sensor:
  - platform: template
    name: "Formatted Uptime"
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int days = dur / 86400;
      int hours = (dur % 86400) / 3600;
      int minutes = (dur % 3600) / 60;
      int seconds = dur % 60;
      char buffer[50];
      if (days > 0) {
        sprintf(buffer, "%dd %02dh %02dm %02ds", days, hours, minutes, seconds);
      } else if (hours > 0) {
        sprintf(buffer, "%02dh %02dm %02ds", hours, minutes, seconds);
      } else if (minutes > 0) {
        sprintf(buffer, "%02dm %02ds", minutes, seconds);
      } else {
        sprintf(buffer, "%02ds", seconds);
      }
      return {buffer};
    update_interval: 60s

  - platform: seeed_mr60bha2
    version:
      name: "Radar Firmware Version"
    mac_address:
      name: "Radar BT MAC"

  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

debug:
  update_interval: 30s

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    id: reboot_esp

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: seeed_mr60bha2
    factory_reset:
      name: "Factory Reset Radar"
    restart:
      name: "Restart Radar"
    query_params:
      name: query params
